using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using Kimmen.Patterns.Api.Typing;
using Kimmen.Patterns.Core;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Abstractions;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.Routing;

namespace Kimmen.Patterns.Api.ApiExplorer
{
    /// <summary>
    /// Creates description, according to ApiExplorer, for the found requests types so they can be generated by Swashbuckle.
    /// </summary>
    /// <typeparam name="TApiController">The Controller type that provides the "one route" actions.</typeparam>
    public class HandlerRequestApiGroupCollectionProvider<TApiController> : IApiDescriptionGroupCollectionProvider
    {
        private readonly IRequestTypeProvider typeProvider;
        private readonly Type targetApiControllerType;
        private readonly ApiDescriptionGroupCollectionProvider defaultProvider;

        public HandlerRequestApiGroupCollectionProvider(IActionDescriptorCollectionProvider collectionProvider, IEnumerable<IApiDescriptionProvider> list, IRequestTypeProvider typeProvider)
        {
            this.typeProvider = typeProvider;
            this.targetApiControllerType = typeof(TApiController);
            this.defaultProvider = new ApiDescriptionGroupCollectionProvider(collectionProvider, list);
        }

        public ApiDescriptionGroupCollection ApiDescriptionGroups
        {
            get
            {
                var handlerRequestApiDescriptions = typeProvider
                    .GetAllRequestTypeNames()
                    .Select(CreateApiDescription)
                    .ToList();

                var handlerRequestsGroup = new List<ApiDescriptionGroup>
                {
                    new ApiDescriptionGroup("oneRoute", handlerRequestApiDescriptions)
                };

                var groupCollectionUnion = handlerRequestsGroup.Concat(defaultProvider.ApiDescriptionGroups.Items).ToList();

                return new ApiDescriptionGroupCollection(groupCollectionUnion, 1);
            }
        }

        private ApiDescription CreateApiDescription(string typeName)
        {
            var requestType = this.typeProvider.GetRequestType(typeName);
            var responseType = this.typeProvider.GetResponseType(typeName);

            var useGetMethod = IsConsideredGetMethod(requestType);
            var baseRoute = ExtractBaseRouteFromTargetController(targetApiControllerType);
            var routeName = GetNameByConvention(requestType);

            var actionDescriptor = new ControllerActionDescriptor
            {
                AttributeRouteInfo = new AttributeRouteInfo
                {
                    Name = routeName
                },
                RouteValues = new Dictionary<string, string>
                {
                    ["controller"] = this.targetApiControllerType.Name.Replace("Controller", string.Empty) //normalizes the display name
                },
                DisplayName = routeName,
                MethodInfo = GetProperControllerMethod(useGetMethod, targetApiControllerType),
                Parameters = new List<ParameterDescriptor>
                {
                    new ControllerParameterDescriptor
                    {
                        Name = routeName,
                        ParameterInfo = new HandlerRequestParameterInfo(requestType)
                    }
                }
            };

            var apiDesc = useGetMethod
                ? BuildGetDescription(baseRoute, routeName, requestType, actionDescriptor)
                : BuildPostDescription(baseRoute, routeName, requestType, actionDescriptor);

            apiDesc.SupportedResponseTypes.Add(new ApiResponseType
            {
                Type = responseType,
                StatusCode = (int)HttpStatusCode.OK,
                ApiResponseFormats = new List<ApiResponseFormat>
                {
                    new ApiResponseFormat
                    {
                        MediaType = "application/json"
                    }
                }
            });
            apiDesc.SupportedResponseTypes.Add(new ApiResponseType
            {
                Type = typeof(IEnumerable<ErrorDescriptions>),
                StatusCode = (int)HttpStatusCode.BadRequest,
                ApiResponseFormats = new List<ApiResponseFormat>
                {
                    new ApiResponseFormat
                    {
                        MediaType = "application/json"
                    }
                }
            });

            return apiDesc;
        }

        private static MethodInfo GetProperControllerMethod(bool isConsideredGet, Type controllerType)
        {
            return controllerType.GetMethod(isConsideredGet ? "Get" : "Post");
        }

        private static ApiDescription BuildPostDescription(string baseRoute, string routeName, Type requestType, ActionDescriptor actionDescriptor)
        {
            var apiDesc = new ApiDescription
            {
                HttpMethod = HttpMethods.Post,
                RelativePath = $"{baseRoute}/{routeName}",
                ParameterDescriptions =
                {
                    new ApiParameterDescription
                    {
                        Name = routeName,
                        Type = requestType,
                        IsRequired = true,
                        DefaultValue = Activator.CreateInstance(requestType),
                        Source = BindingSource.Body,
                        RouteInfo = new ApiParameterRouteInfo
                        {
                            IsOptional = false
                        },
                        ParameterDescriptor = new ControllerParameterDescriptor
                        {
                            Name = routeName,
                            ParameterType = requestType,
                            ParameterInfo = new HandlerRequestParameterInfo(requestType)
                        }
                    }
                },
                ActionDescriptor = actionDescriptor
            };
            return apiDesc;
        }

        private static ApiDescription BuildGetDescription(string baseRoute, string routeName, Type requestType, ActionDescriptor actionDescriptor)
        {
            var queryParamsProps = requestType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

            var apiDesc = new ApiDescription
            {
                HttpMethod = HttpMethods.Get,
                RelativePath = $"{baseRoute}/{routeName}",
                ActionDescriptor = actionDescriptor
            };

            foreach (var prop in queryParamsProps)
            {
                apiDesc.ParameterDescriptions.Add(new ApiParameterDescription
                {
                    Type = prop.PropertyType,
                    Name = prop.Name,
                    IsRequired = true,
                    Source = BindingSource.Query,
                    ParameterDescriptor = new ControllerParameterDescriptor
                    {
                        ParameterType = prop.PropertyType,
                        Name = prop.Name,
                        ParameterInfo = new HandlerRequestParameterInfo(prop.PropertyType)
                    }
                });
            }

            return apiDesc;
        }

        private static bool IsConsideredGetMethod(MemberInfo requestType)
        {
            var preferableMethod = requestType.GetCustomAttribute<PreferableMethodAttribute>();

            return preferableMethod != null && preferableMethod.IsQuery;
        }

        private static string GetNameByConvention(MemberInfo requestType)
        {
            //We are using static class as namespace for requests, proper name if the static parent class.
            return requestType.DeclaringType.Name;
        }

        private static string ExtractBaseRouteFromTargetController(MemberInfo type)
        {
            var routeAttribute = type.GetCustomAttribute<RouteAttribute>(true);
            return routeAttribute != null
                ? routeAttribute.Template
                : string.Empty;
        }
    }
}